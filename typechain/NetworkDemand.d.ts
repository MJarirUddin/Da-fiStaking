/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface NetworkDemandInterface extends ethers.utils.Interface {
  functions: {
    "addWhitelist(address)": FunctionFragment;
    "calculateNetworkDemand()": FunctionFragment;
    "getCurrentPrice()": FunctionFragment;
    "getIndexToUpdate()": FunctionFragment;
    "getNoOfPricese()": FunctionFragment;
    "getPriceCurrent()": FunctionFragment;
    "getPricePercentage()": FunctionFragment;
    "getTVLCurrent()": FunctionFragment;
    "getTVLPercentage()": FunctionFragment;
    "getTargetPrice()": FunctionFragment;
    "getTargetTVL()": FunctionFragment;
    "getTolerance()": FunctionFragment;
    "lastPrices(uint256)": FunctionFragment;
    "networkDemand()": FunctionFragment;
    "owner()": FunctionFragment;
    "priceFeeds()": FunctionFragment;
    "removeWhitelist(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setCurrentPrice(uint256)": FunctionFragment;
    "setIndexToUpdate(uint8)": FunctionFragment;
    "setNoOfPrices(uint8)": FunctionFragment;
    "setPricePercentage(uint16)": FunctionFragment;
    "setTVLPercentage(uint16)": FunctionFragment;
    "setTargetPrice(uint256)": FunctionFragment;
    "setTargetTVL(uint256)": FunctionFragment;
    "setTolerance(uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "tvlFeeds()": FunctionFragment;
    "updatePriceFeed(address)": FunctionFragment;
    "updateTVLFeed(address)": FunctionFragment;
    "whitelists(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateNetworkDemand",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIndexToUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNoOfPricese",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceCurrent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPricePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTVLCurrent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTVLPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetTVL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTolerance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastPrices",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "networkDemand",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceFeeds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setIndexToUpdate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNoOfPrices",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPricePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTVLPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTargetPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTargetTVL",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTolerance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "tvlFeeds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePriceFeed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTVLFeed",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "whitelists", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "addWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateNetworkDemand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIndexToUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNoOfPricese",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPricePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTVLCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTVLPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetTVL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastPrices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "networkDemand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeeds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIndexToUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNoOfPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPricePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTVLPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTargetPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTargetTVL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tvlFeeds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTVLFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelists", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class NetworkDemand extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NetworkDemandInterface;

  functions: {
    addWhitelist(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateNetworkDemand(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCurrentPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getIndexToUpdate(overrides?: CallOverrides): Promise<[number]>;

    getNoOfPricese(overrides?: CallOverrides): Promise<[number]>;

    getPriceCurrent(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPricePercentage(overrides?: CallOverrides): Promise<[number]>;

    getTVLCurrent(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTVLPercentage(overrides?: CallOverrides): Promise<[number]>;

    getTargetPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTargetTVL(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTolerance(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    networkDemand(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    priceFeeds(overrides?: CallOverrides): Promise<[string]>;

    removeWhitelist(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCurrentPrice(
      _currentPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIndexToUpdate(
      _IndexToUpdate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNoOfPrices(
      _noOfPrices: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPricePercentage(
      _pricePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTVLPercentage(
      _tvlPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTargetPrice(
      _targetPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTargetTVL(
      _targetTVL: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTolerance(
      _tolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tvlFeeds(overrides?: CallOverrides): Promise<[string]>;

    updatePriceFeed(
      newPriceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTVLFeed(
      newTVLFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelists(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  addWhitelist(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateNetworkDemand(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getIndexToUpdate(overrides?: CallOverrides): Promise<number>;

  getNoOfPricese(overrides?: CallOverrides): Promise<number>;

  getPriceCurrent(overrides?: CallOverrides): Promise<BigNumber>;

  getPricePercentage(overrides?: CallOverrides): Promise<number>;

  getTVLCurrent(overrides?: CallOverrides): Promise<BigNumber>;

  getTVLPercentage(overrides?: CallOverrides): Promise<number>;

  getTargetPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getTargetTVL(overrides?: CallOverrides): Promise<BigNumber>;

  getTolerance(overrides?: CallOverrides): Promise<BigNumber>;

  lastPrices(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  networkDemand(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  priceFeeds(overrides?: CallOverrides): Promise<string>;

  removeWhitelist(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCurrentPrice(
    _currentPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIndexToUpdate(
    _IndexToUpdate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNoOfPrices(
    _noOfPrices: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPricePercentage(
    _pricePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTVLPercentage(
    _tvlPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTargetPrice(
    _targetPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTargetTVL(
    _targetTVL: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTolerance(
    _tolerance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tvlFeeds(overrides?: CallOverrides): Promise<string>;

  updatePriceFeed(
    newPriceFeed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTVLFeed(
    newTVLFeed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelists(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    addWhitelist(account: string, overrides?: CallOverrides): Promise<void>;

    calculateNetworkDemand(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getIndexToUpdate(overrides?: CallOverrides): Promise<number>;

    getNoOfPricese(overrides?: CallOverrides): Promise<number>;

    getPriceCurrent(overrides?: CallOverrides): Promise<BigNumber>;

    getPricePercentage(overrides?: CallOverrides): Promise<number>;

    getTVLCurrent(overrides?: CallOverrides): Promise<BigNumber>;

    getTVLPercentage(overrides?: CallOverrides): Promise<number>;

    getTargetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getTargetTVL(overrides?: CallOverrides): Promise<BigNumber>;

    getTolerance(overrides?: CallOverrides): Promise<BigNumber>;

    lastPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    networkDemand(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    priceFeeds(overrides?: CallOverrides): Promise<string>;

    removeWhitelist(account: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setCurrentPrice(
      _currentPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setIndexToUpdate(
      _IndexToUpdate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNoOfPrices(
      _noOfPrices: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPricePercentage(
      _pricePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTVLPercentage(
      _tvlPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTargetPrice(
      _targetPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTargetTVL(
      _targetTVL: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTolerance(
      _tolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tvlFeeds(overrides?: CallOverrides): Promise<string>;

    updatePriceFeed(
      newPriceFeed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTVLFeed(newTVLFeed: string, overrides?: CallOverrides): Promise<void>;

    whitelists(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    addWhitelist(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateNetworkDemand(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getIndexToUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    getNoOfPricese(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceCurrent(overrides?: CallOverrides): Promise<BigNumber>;

    getPricePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    getTVLCurrent(overrides?: CallOverrides): Promise<BigNumber>;

    getTVLPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    getTargetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getTargetTVL(overrides?: CallOverrides): Promise<BigNumber>;

    getTolerance(overrides?: CallOverrides): Promise<BigNumber>;

    lastPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    networkDemand(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeeds(overrides?: CallOverrides): Promise<BigNumber>;

    removeWhitelist(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCurrentPrice(
      _currentPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIndexToUpdate(
      _IndexToUpdate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNoOfPrices(
      _noOfPrices: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPricePercentage(
      _pricePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTVLPercentage(
      _tvlPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTargetPrice(
      _targetPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTargetTVL(
      _targetTVL: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTolerance(
      _tolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tvlFeeds(overrides?: CallOverrides): Promise<BigNumber>;

    updatePriceFeed(
      newPriceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTVLFeed(
      newTVLFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelists(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addWhitelist(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateNetworkDemand(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIndexToUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNoOfPricese(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPriceCurrent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPricePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTVLCurrent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTVLPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTargetPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTargetTVL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTolerance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    networkDemand(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeeds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeWhitelist(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCurrentPrice(
      _currentPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIndexToUpdate(
      _IndexToUpdate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNoOfPrices(
      _noOfPrices: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPricePercentage(
      _pricePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTVLPercentage(
      _tvlPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTargetPrice(
      _targetPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTargetTVL(
      _targetTVL: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTolerance(
      _tolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tvlFeeds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updatePriceFeed(
      newPriceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTVLFeed(
      newTVLFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelists(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
